package com.banking.oracle.dao.branch;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.banking.oracle.config.DatabaseConfig;
import com.banking.oracle.dao.role.Role;

public class BranchDAOImplementation implements BranchDAO {
	Connection conn;
	
	public BranchDAOImplementation() {
		conn = DatabaseConfig.getConnection();
	}
	
	@Override
	public List<Branch> get() {
		List<Branch> branches = new ArrayList<>();
		try {
			Statement statement = conn.createStatement();
			ResultSet result = statement.executeQuery("SELECT * FROM branch");
			while (result.next()) {
				branches.add(new Branch(result.getInt("branchCode"), result.getString("branchName") , result.getString("ifscCode")));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return branches;
	}

	@Override
	public Branch getByBranchCode(Integer branchCode) {
		Branch branch = null;
		try {
			Statement statement = conn.createStatement();
			ResultSet result = statement.executeQuery("SELECT * FROM branch");
			if (result.next()) {
				branch = new Branch(result.getInt("branchCode"), result.getString("branchName") , result.getString("ifscCode"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return branch;
	}

	@Override
	public boolean update(Branch branch) {
		if (branch == null || branch.getBranchCode() == null) {
			throw new IllegalArgumentException("Branch and branchCode must not be null");
		}

		List<String> setClauses = new ArrayList<>();
		List<Object> parameters = new ArrayList<>();

		if (branch.getBranchName() != null) {
			setClauses.add("branchName = ?");
			parameters.add(branch.getBranchName());
		}
		if (branch.getIfscCode() != null) {
			setClauses.add("branchName = ?");
			parameters.add(branch.getBranchName());
		}

		String sql = "UPDATE `role` SET " + String.join(", ", setClauses) + " WHERE roleId = ?";
		parameters.add(role.getRoleId());

		try (PreparedStatement pst = conn.prepareStatement(sql)) {
			for (int i = 0; i < parameters.size(); i++) {
				pst.setObject(i + 1, parameters.get(i));
			}

			int rows = pst.executeUpdate();
			if (rows > 0)
				return true;
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	@Override
	public boolean delete(Integer branchCode) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean create(Branch branch) {
		// TODO Auto-generated method stub
		return false;
	}

}
