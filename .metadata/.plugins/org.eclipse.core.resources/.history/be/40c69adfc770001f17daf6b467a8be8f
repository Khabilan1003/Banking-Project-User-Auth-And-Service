package com.banking.oracle.dao.role;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.banking.oracle.config.DatabaseConfig;

@Service
public class RoleDAOImplementation implements RoleDAO {
	Connection conn;

	public RoleDAOImplementation() {
		conn = DatabaseConfig.getConnection();
	}

	@Override
	public boolean create(Role role) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean update(Role role) {
		if(role == null || role.getRoleId() == null) {
			throw new IllegalArgumentException("Role and roleId must not be null");
		}
		
        List<String> setClauses = new ArrayList<>();
        List<Object> parameters = new ArrayList<>();
        
        if(role.getRoleName() != null) {
        	setClauses.add("roleName = ?");
        	parameters.add(role.getRoleName());
        }
        
        String sql = "UPDATE `role` SET " + String.join(", ", setClauses) + " WHERE vehicleId = ?";
        parameters.add(role.getRoleId());

        try (PreparedStatement pst = conn.prepareStatement(sql)) {
            for (int i = 0; i < parameters.size(); i++) {
                pst.setObject(i + 1, parameters.get(i));
            }

            int rows = pst.executeUpdate();
            if(rows > 0) return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return false;
	}

	@Override
	public boolean delete(Role role) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<Role> get() {
		List<Role> roles = new ArrayList<>();
		try {
			Statement statement = conn.createStatement();
			ResultSet result = statement.executeQuery("SELECT * FROM role");
			while (result.next()) {
				roles.add(new Role(result.getInt("roleId"), result.getString("roleName")));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return roles;
	}

	@Override
	public Role getByRoleId(Integer roleId) {
		Role role = null;
		try {
			Statement statement = conn.createStatement();
			ResultSet result = statement.executeQuery("SELECT * FROM role WHERE roleId = " + roleId);
			if (result.next()) {
				role = new Role(result.getInt("roleId"), result.getString("roleName"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return role;
	}
}
